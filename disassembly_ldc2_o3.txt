james@ubuntu18:~/source/swiftover$ lldb-8 -- ./swiftover -t vcf -c resources/GRCh37_to_GRCh38.chain -g ../ref/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz -i ../ref/gnomad.exomes.r2.1.1.sites.21.vcf.gz -u /dev/null -o /dev/null
(lldb) target create "./swiftover"
Current executable set to './swiftover' (x86_64).
(lldb) settings set -- target.run-args  "-t" "vcf" "-c" "resources/GRCh37_to_GRCh38.chain" "-g" "../ref/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz" "-i" "../ref/gnomad.exomes.r2.1.1.sites.21.vcf.gz" "-u" "/dev/null" "-o" "/dev/null"
(lldb) b vcf.d:216
Breakpoint 1: where = swiftover`_D7dhtslib3vcf9VCFRecord5chromMFNdAyaZv + 229 at vcf.d:216:13, address = 0x00000000000f8235
(lldb) r
Process 18012 launched: '/home/james/source/swiftover/swiftover' (x86_64)
[I::swiftover.vcf.liftVCF] Added 25 contig entries from chainfile
[W::swiftover.vcf.liftVCF] 57 contigs present in chainfile but not destination genome.
[E::dhtslib.vcf.VCFRecord.chrom] contig not found: ï¿½s
error: need to add support for DW_TAG_base_type 'immutable(char)' encoded with DW_ATE = 0x10, bit_size = 8
Process 18012 stopped
* thread #1, name = 'swiftover', stop reason = breakpoint 1.1
    frame #0: 0x000055555564c235 swiftover`_D7dhtslib3vcf9VCFRecord5chromMFNdAyaZv(this=<unavailable>, c=<unavailable>) at vcf.d:216:13
   213 	        auto rid = bcf_hdr_name2id(this.vcfheader.hdr, toStringz(c));
   214 	        if (rid == -1) {
   215 	            hts_log_error(__FUNCTION__, format("contig not found: %s", c));
-> 216 	            throw new Exception("contig not found");
   217 	        }
   218 	        else line.rid = rid;
   219 	    }
(lldb) di -f -m

** 211 	    void chrom(string c)

swiftover`_D7dhtslib3vcf9VCFRecord5chromMFNdAyaZv:
    0x55555564c150 <+0>:   pushq  %r15
    0x55555564c152 <+2>:   pushq  %r14
    0x55555564c154 <+4>:   pushq  %r12
    0x55555564c156 <+6>:   pushq  %rbx
    0x55555564c157 <+7>:   subq   $0x58, %rsp
    0x55555564c15b <+11>:  movq   %rdx, %r14
    0x55555564c15e <+14>:  movq   %rsi, %r15
    0x55555564c161 <+17>:  movq   %rdi, %rbx

   212 	    {
** 213 	        auto rid = bcf_hdr_name2id(this.vcfheader.hdr, toStringz(c));

    0x55555564c164 <+20>:  movq   0x18(%rdi), %rax
    0x55555564c168 <+24>:  movq   (%rax), %r12
    0x55555564c16b <+27>:  movq   %rsi, %rdi
    0x55555564c16e <+30>:  movq   %rdx, %rsi
    0x55555564c171 <+33>:  callq  0x555555688bf0            ; _D3std6string9toStringzFNaNbNeMNkAyaZPya

   873 	     *  bcf_hdr_id2name() - Translates numeric ID to sequence name
   874 	     */
** 875 	    pragma(inline, true) int bcf_hdr_name2id(const(bcf_hdr_t) *hdr, const(char) *id) { return bcf_hdr_id2int(hdr, BCF_DT_CTG, id); } // @suppress(dscanner.style.long_line)
   876 	    /// ditto
   877 	    pragma(inline, true) const(char) *bcf_hdr_id2name(const(bcf_hdr_t) *hdr, int rid) { return hdr.id[BCF_DT_CTG][rid].key; } // @suppress(dscanner.style.long_line)

    0x55555564c176 <+38>:  movq   %r12, %rdi
    0x55555564c179 <+41>:  movl   $0x1, %esi
    0x55555564c17e <+46>:  movq   %rax, %rdx
    0x55555564c181 <+49>:  callq  0x55555564b3c0            ; symbol stub for: bcf_hdr_id2int

** 214 	        if (rid == -1) {

    0x55555564c186 <+54>:  cmpl   $-0x1, %eax
    0x55555564c189 <+57>:  je     0x55555564c19d            ; <+77> at vcf.d:215:13

   217 	        }
** 218 	        else line.rid = rid;

    0x55555564c18b <+59>:  movq   0x10(%rbx), %rcx
    0x55555564c18f <+63>:  movl   %eax, (%rcx)

** 219 	    }
   220
   221

    0x55555564c191 <+65>:  addq   $0x58, %rsp
    0x55555564c195 <+69>:  popq   %rbx
    0x55555564c196 <+70>:  popq   %r12
    0x55555564c198 <+72>:  popq   %r14
    0x55555564c19a <+74>:  popq   %r15
    0x55555564c19c <+76>:  retq

** 215 	            hts_log_error(__FUNCTION__, format("contig not found: %s", c));

    0x55555564c19d <+77>:  leaq   0x7439c(%rip), %rcx
    0x55555564c1a4 <+84>:  movl   $0x14, %edx
    0x55555564c1a9 <+89>:  movq   %r15, %rdi
    0x55555564c1ac <+92>:  movq   %r14, %rsi
    0x55555564c1af <+95>:  callq  0x55555564c2c0            ; _D3std6format__TQkTaTAyaZQtFNaNfxAaQoZQr at format.d:6427

   72  	void hts_log_error(const(char)[] ctx, string msg)
   73  	{
** 74  	    string colormsg = "\x1b[0;31m" ~ msg ~ "\x1b[0m";

    0x55555564c1b4 <+100>: movq   $0x7, 0x28(%rsp)
    0x55555564c1bd <+109>: leaq   0x7e986(%rip), %rcx
    0x55555564c1c4 <+116>: movq   %rcx, 0x30(%rsp)
    0x55555564c1c9 <+121>: movq   %rax, 0x38(%rsp)
    0x55555564c1ce <+126>: movq   %rdx, 0x40(%rsp)
    0x55555564c1d3 <+131>: movq   $0x4, 0x48(%rsp)
    0x55555564c1dc <+140>: leaq   0x7e962(%rip), %rax
    0x55555564c1e3 <+147>: movq   %rax, 0x50(%rsp)
    0x55555564c1e8 <+152>: leaq   0xb12f9(%rip), %rdi       ; _D12TypeInfo_Aya6__initZ
    0x55555564c1ef <+159>: leaq   0x28(%rsp), %rdx
    0x55555564c1f4 <+164>: movl   $0x3, %esi
    0x55555564c1f9 <+169>: callq  0x5555556a6100            ; _d_arraycatnTX
    0x55555564c1fe <+174>: movq   %rax, %rbx
    0x55555564c201 <+177>: movq   %rdx, %r14

** 75  	    hts_log(htsLogLevel.HTS_LOG_ERROR, toStringz(ctx), toStringz(colormsg));
   76  	}
   77  	/**! Logs an event with severity HTS_LOG_WARNING and default context. Parameters: format, ... */

    0x55555564c204 <+180>: leaq   0x74315(%rip), %rsi
    0x55555564c20b <+187>: movl   $0x1b, %edi
    0x55555564c210 <+192>: callq  0x555555688b90            ; _D3std6string9toStringzFNaNbNeMAxaZPya
    0x55555564c215 <+197>: movq   %rax, %r15
    0x55555564c218 <+200>: movq   %rbx, %rdi
    0x55555564c21b <+203>: movq   %r14, %rsi
    0x55555564c21e <+206>: callq  0x555555688bf0            ; _D3std6string9toStringzFNaNbNeMNkAyaZPya
    0x55555564c223 <+211>: movl   $0x1, %edi
    0x55555564c228 <+216>: movq   %r15, %rsi
    0x55555564c22b <+219>: movq   %rax, %rdx
    0x55555564c22e <+222>: xorl   %eax, %eax
    0x55555564c230 <+224>: callq  0x55555564b3d0            ; symbol stub for: hts_log

-> 216 	            throw new Exception("contig not found");

->  0x55555564c235 <+229>: leaq   0x105714(%rip), %rdi      ; _D9Exception7__ClassZ
    0x55555564c23c <+236>: callq  0x5555556a2640            ; _d_allocclass
    0x55555564c241 <+241>: movq   %rax, %rbx
    0x55555564c244 <+244>: leaq   0xafdc5(%rip), %rax       ; _D9Exception6__vtblZ
    0x55555564c24b <+251>: movq   %rax, (%rbx)
    0x55555564c24e <+254>: movq   $0x0, 0x8(%rbx)
    0x55555564c256 <+262>: leaq   0xafe03(%rip), %rax       ; _D9Exception6__initZ
    0x55555564c25d <+269>: movups 0x10(%rax), %xmm0
    0x55555564c261 <+273>: movups 0x20(%rax), %xmm1
    0x55555564c265 <+277>: movups 0x30(%rax), %xmm2
    0x55555564c269 <+281>: movups 0x3c(%rax), %xmm3
    0x55555564c26d <+285>: movups %xmm3, 0x3c(%rbx)
    0x55555564c271 <+289>: movups %xmm2, 0x30(%rbx)
    0x55555564c275 <+293>: movups %xmm1, 0x20(%rbx)
    0x55555564c279 <+297>: movups %xmm0, 0x10(%rbx)
    0x55555564c27d <+301>: movq   $0x10, 0x18(%rsp)
    0x55555564c286 <+310>: leaq   0x742d3(%rip), %rax
    0x55555564c28d <+317>: movq   %rax, 0x20(%rsp)
    0x55555564c292 <+322>: movups 0x18(%rsp), %xmm0
    0x55555564c297 <+327>: movups %xmm0, (%rsp)
    0x55555564c29b <+331>: leaq   0x742de(%rip), %r8
    0x55555564c2a2 <+338>: movl   $0xd8, %edx
    0x55555564c2a7 <+343>: movl   $0x1f, %ecx
    0x55555564c2ac <+348>: movq   %rbx, %rdi
    0x55555564c2af <+351>: xorl   %esi, %esi
    0x55555564c2b1 <+353>: callq  0x55555569ca40            ; _D6object9Exception6__ctorMFNaNbNiNfAyaQdmCQBp9ThrowableZCQBx
    0x55555564c2b6 <+358>: movq   %rbx, %rdi
    0x55555564c2b9 <+361>: callq  0x5555556a18a0            ; _d_throw_exception
(lldb) frame var
(VCFRecord *) this = <variable not available>

(string) c = <no location, value may have been optimized out>

(int) rid = <variable not available>

(lldb) up
frame #1: 0x000055555565010b swiftover`_D9swiftover3vcf7liftVCFFAyaQdQfQhQjbZv(chainfile=(length = 32, ptr = 0x00007fffffffe03d), genomefile=(length = 53, ptr = 0x00007fffffffe05f), infile=(length = 43, ptr = 0x00007fffffffe096), outfile=<unavailable>, unmatched=<unavailable>, removeTags=<unavailable>) at vcf.d:118:9
   115
   116 	        const auto nresult = cf.liftDirectly(contig, coord);
   117
-> 118 	        rec.chrom = contig;
   119 	        rec.pos = coord;
   120
   121 	        // If not liftable, write to unmatched
(lldb) frame var
error: need to add support for DW_TAG_base_type 'const(char)' encoded with DW_ATE = 0x10, bit_size = 8
error: need to add support for DW_TAG_base_type 'char' encoded with DW_ATE = 0x10, bit_size = 8
(string) chainfile = (length = 32, ptr = 0x00007fffffffe03d)
(string) genomefile = (length = 53, ptr = 0x00007fffffffe05f)
(string) infile = (length = 43, ptr = 0x00007fffffffe096)
(string) outfile = <no location, value may have been optimized out>

(string) unmatched = <no location, value may have been optimized out>

(bool) removeTags = <no location, value may have been optimized out>

(ChainFile) cf = {
  chainsByContig = {
    cr = 0x000055555577d860
  }
  qContigSizes = {
    buckets = {
      length = 256
      ptr = 0x0000555555787200
    }
    _length = 82
  }
}
(IndexedFastaFile) fa = <no location, value may have been optimized out>

(VCFReader *) fi = <variable not available>

(VCFWriter) fo = <no location, value may have been optimized out>

(int) missingInGenome = <variable not available>

(int) newContigsAdded = <variable not available>

(VCFWriter) fu = <no location, value may have been optimized out>

(int) nmatched = 64809
(int) nunmatched = 3634
(VCFReader) __r1032 = <no location, value may have been optimized out>

(VCFRecord *) rec = 0x00007ffff07189a0
(int) coord = 36135294
(int) nresult = 1
(string) contig = <no location, value may have been optimized out>

(lldb) frame var *rec
(VCFRecord) *rec = {
  line = 0x0000555555e3a860
  vcfheader = 0x00007ffff097a2e0
}
(lldb) frame var *rec->line
(bcf1_t) *rec->line = {
  rid = 20
  pos = 37507592
  rlen = 1
  qual = 1792.79004
  _n_info_n_allele = 131930
  _n_fmt_n_sample = 0
  _shared = (l = 9558, m = 9558, s = 0x0000555558219f00)
  indiv = (l = 0, m = 0, s = 0x0000000000000000)
  d = {
    m_fmt = 0
    m_info = 1024
    m_id = 16
    m_als = 8
    m_allele = 2
    m_flt = 1
    n_flt = 1
    flt = 0x00005555559b5640
    id = 0x00005555559b6350
    als = 0x0000555555e3a930
    allele = 0x00005555559b6330
    info = 0x00005555a27348c0
    fmt = 0x0000000000000000
    var = 0x0000000000000000
    n_var = 0
    var_type = -1
    shared_dirty = 0
    indiv_dirty = 0
  }
  max_unpack = 0
  unpacked = 7
  unpack_size = ([0] = 12, [1] = 4, [2] = 2)
  errcode = 0
}
